{"version":3,"file":"static/js/680.9644f0bb.chunk.js","mappings":"2MAIO,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,MACpBC,GAAWC,EAAAA,EAAAA,MAGjB,OAFAC,QAAQC,IAAI,WAAYH,IAGtB,wBACGI,QAAQL,IACPA,EAAMM,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACR,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMT,GAAYU,GAAE,kBAAaH,GAAhD,SACGD,KAFIC,EADD,KASjB,C,iKCbc,SAASI,EAAT,GAA+B,EAAXC,QAAY,IAC7C,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOd,EAAP,KAAce,EAAd,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEID,GAAW,GAFf,UAG0BE,EAAAA,EAAAA,MAH1B,OAGUR,EAHV,OAIIE,EAASF,GACTI,EAAS,MALb,gDAOIA,EAAS,KAAMK,SAPnB,yBASIH,GAAW,GATf,6EADc,uBAAC,WAAD,wBAadI,EACD,GAAE,KAGD,UAAC,KAAD,WACa,OAAVP,IAAkB,uBAAIA,IACtBE,IAAW,SAAC,IAAD,KAEZ,SAAC,IAAD,CAAWlB,MAAOA,MAGvB,C,8LCjCDwB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMJ,EAAiB,mCAAG,sGACRG,EAAAA,EAAAA,IAAU,uBADF,uBACvBE,EADuB,EACvBA,KADuB,kBAExBC,EAAuBD,IAFC,2CAAH,qDAKjBE,EAAgB,mCAAG,WAAMC,GAAN,yFACPL,EAAAA,EAAAA,IAAA,8BAAiCK,IAD1B,uBACtBH,EADsB,EACtBA,KADsB,kBAGvBC,EAAuBD,IAHA,2CAAH,sDAMhBI,EAAiB,mCAAG,WAAMC,GAAN,yFACRP,EAAAA,EAAAA,IAAA,iBAAoBO,IADZ,uBACvBL,EADuB,EACvBA,KADuB,kBAExBM,EAAqBN,IAFG,2CAAH,sDAKjBO,EAAS,mCAAG,WAAMF,GAAN,yFACAP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,aADA,uBACfL,EADe,EACfA,KADe,kBAEhBQ,EAAkBR,IAFF,2CAAH,sDAKTS,EAAY,mCAAG,WAAMJ,GAAN,yFACHP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,aADG,uBAClBL,EADkB,EAClBA,KADkB,kBAEnBU,EAAqBV,IAFF,2CAAH,sDAKnBC,EAAyB,SAAC,GAAD,SAAGd,QACxBP,KAAI,kBAAoB,CAC9BE,GADU,EAAGA,GAEbD,MAFU,EAAOA,MAAP,GADiB,EAMzByB,EAAuB,SAAAN,GAC3B,IAAQnB,EACNmB,EADMnB,MAAO8B,EACbX,EADaW,aAAcC,EAC3BZ,EAD2BY,SAAUC,EACrCb,EADqCa,YAAaC,EAClDd,EADkDc,OAAQC,EAC1Df,EAD0De,WAG5D,MAAO,CACLlC,MAAAA,EACA8B,aAAc,IAAIK,KAAKL,GAAcM,cACrCL,SAAAA,EACAC,YAAaA,GAAe,kCAAoCA,EAChEC,OAAQA,EAAOlC,KAAI,kBAAe,CAAEsC,KAAjB,EAAGA,KAAH,IACnBH,WAAAA,EAEH,EAEKP,EAAoB,SAAC,GAAD,SAAGW,KACtBvC,KAAI,gBAAGwC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAd,MAAwC,CAC/CD,UAAAA,EACAC,aACEA,GAAgB,kCAAoCA,EACtDH,KAJO,EAA4BA,KAA5B,GADe,EAQpBR,EAAuB,SAAC,GAAD,SAAGvB,QACtBP,KAAI,kBAA8B,CACxC0C,OADU,EAAGA,OAEbC,QAFU,EAAWA,QAGrBzC,GAHU,EAAoBA,GAApB,GADe,C","sources":["components/FilmsList/FilmsList.jsx","pages/HomePage/HomePage.jsx","service/films-service.js"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport function FilmsList({ films }) {\n  const location = useLocation();\n  console.log('location', location);\n\n  return (\n    <ul>\n      {Boolean(films) &&\n        films.map(({ title, id }) => (\n          <li key={id}>\n            <Link state={{ from: location }} to={`/movies/${id}`}>\n              {title}\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nFilmsList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { FilmsList } from 'components/FilmsList/FilmsList';\nimport { fetchTendingFilms } from 'service/films-service';\nimport { Section } from '../../components/App/App.styled';\nimport Loader from 'components/Loader/Loader';\n\nexport default function HomePage({ results }) {\n  const [films, setFilms] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function getFilms() {\n      try {\n        setLoading(true);\n        const results = await fetchTendingFilms();\n        setFilms(results);\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getFilms();\n  }, []);\n\n  return (\n    <Section>\n      {error !== null && <p>{error}</p>}\n      {loading && <Loader />}\n\n      <FilmsList films={films} />\n    </Section>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '0df85a9f4a0e6a141a9b6b1b0b1aadce';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const fetchTendingFilms = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n  return getNormalizedFilmsData(data);\n};\n\nexport const fetchSearchFilms = async value => {\n  const { data } = await axios.get(`/search/movie?query=${value}`);\n\n  return getNormalizedFilmsData(data);\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  return getNormalizedDetails(data);\n};\n\nexport const fetchCast = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return getNormalizedCast(data);\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return getNormalizedReviews(data);\n};\n\nconst getNormalizedFilmsData = ({ results }) =>\n  results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\nconst getNormalizedDetails = data => {\n  const { title, release_date, overview, poster_path, genres, popularity } =\n    data;\n\n  return {\n    title,\n    release_date: new Date(release_date).getFullYear(),\n    overview,\n    poster_path: poster_path && 'https://image.tmdb.org/t/p/w300' + poster_path,\n    genres: genres.map(({ name }) => ({ name })),\n    popularity,\n  };\n};\n\nconst getNormalizedCast = ({ cast }) =>\n  cast.map(({ character, profile_path, name }) => ({\n    character,\n    profile_path:\n      profile_path && 'https://image.tmdb.org/t/p/w200' + profile_path,\n    name,\n  }));\n\nconst getNormalizedReviews = ({ results }) =>\n  results.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n"],"names":["FilmsList","films","location","useLocation","console","log","Boolean","map","title","id","state","from","to","HomePage","results","useState","setFilms","error","setError","loading","setLoading","useEffect","fetchTendingFilms","message","getFilms","axios","api_key","data","getNormalizedFilmsData","fetchSearchFilms","value","fetchMovieDetails","movieId","getNormalizedDetails","fetchCast","getNormalizedCast","fetchReviews","getNormalizedReviews","release_date","overview","poster_path","genres","popularity","Date","getFullYear","name","cast","character","profile_path","author","content"],"sourceRoot":""}
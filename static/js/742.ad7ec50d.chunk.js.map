{"version":3,"file":"static/js/742.ad7ec50d.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx","service/films-service.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Card = styled.div`\n  display: flex;\n  gap: 20px;\n  padding: 20px 0;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from './MovieCard.styled';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport function MovieCard({ film }) {\n  const location = useLocation();\n  const { title, release_date, overview, poster_path, genres, popularity } =\n    film;\n\n  return (\n    <>\n      <Link to={location.state.from}>Come back</Link>\n      <Card>\n        <img\n          src={\n            poster_path ??\n            'https://via.placeholder.com/300x450.png?text=No+poster'\n          }\n          alt={title}\n        />\n        <div>\n          <h1>\n            {title}\n            <span>({release_date})</span>\n          </h1>\n          <p>User score: {popularity}</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <ul>\n            {genres.length > 0 &&\n              genres.map(({ name }) => <li key={name}>{name}</li>)}\n          </ul>\n        </div>\n      </Card>\n    </>\n  );\n}\n\nMovieCard.propTypes = {\n  film: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n  }).isRequired,\n};\n","import { Section } from 'components/App/App.styled';\nimport styled from 'styled-components';\n\nexport const SectionDetails = styled(Section)`\n  padding-bottom: 250px;\n  display: flex;\n  gap: 10px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\n\nimport { MovieCard } from 'components/MovieCard/MovieCard';\nimport { fetchMovieDetails } from 'service/films-service';\nimport { Section } from 'components/App/App.styled';\nimport { SectionDetails } from './MovieDetails.styled';\nimport Loader from 'components/Loader/Loader';\n\nexport default function MovieDetails() {\n  const [film, setFilm] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const location = useLocation();\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    async function getMovieDetails() {\n      try {\n        setLoading(true);\n        const film = await fetchMovieDetails(movieId);\n\n        setFilm(film);\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovieDetails();\n  }, [location.pathname, movieId]);\n\n  return (\n    <>\n      <Section>\n        {error !== null && <p>{error}</p>}\n        {loading && <Loader />}\n        {film && <MovieCard film={film} />}\n      </Section>\n      <SectionDetails>\n        <Link to={location.pathname.includes('cast') ? '' : 'cast'}>Cast</Link>\n        <Link to={location.pathname.includes('reviews') ? '' : 'reviews'}>\n          Reviews\n        </Link>\n        <Outlet />\n      </SectionDetails>\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '0df85a9f4a0e6a141a9b6b1b0b1aadce';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const fetchTendingFilms = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n  return getNormalizedFilmsData(data);\n};\n\nexport const fetchSearchFilms = async value => {\n  const { data } = await axios.get(`/search/movie?query=${value}`);\n\n  return getNormalizedFilmsData(data);\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  return getNormalizedDetails(data);\n};\n\nexport const fetchCast = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return getNormalizedCast(data);\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return getNormalizedReviews(data);\n};\n\nconst getNormalizedFilmsData = ({ results }) =>\n  results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\nconst getNormalizedDetails = data => {\n  const { title, release_date, overview, poster_path, genres, popularity } =\n    data;\n\n  return {\n    title,\n    release_date: new Date(release_date).getFullYear(),\n    overview,\n    poster_path: poster_path && 'https://image.tmdb.org/t/p/w300' + poster_path,\n    genres: genres.map(({ name }) => ({ name })),\n    popularity,\n  };\n};\n\nconst getNormalizedCast = ({ cast }) =>\n  cast.map(({ character, profile_path, name }) => ({\n    character,\n    profile_path:\n      profile_path && 'https://image.tmdb.org/t/p/w200' + profile_path,\n    name,\n  }));\n\nconst getNormalizedReviews = ({ results }) =>\n  results.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n"],"names":["Card","styled","MovieCard","film","location","useLocation","title","release_date","overview","poster_path","genres","popularity","to","state","from","src","alt","length","map","name","SectionDetails","Section","MovieDetails","useState","setFilm","error","setError","loading","setLoading","movieId","useParams","useEffect","fetchMovieDetails","message","getMovieDetails","pathname","Loader","includes","axios","api_key","fetchTendingFilms","data","getNormalizedFilmsData","fetchSearchFilms","value","getNormalizedDetails","fetchCast","getNormalizedCast","fetchReviews","getNormalizedReviews","results","id","Date","getFullYear","cast","character","profile_path","author","content"],"sourceRoot":""}
{"version":3,"file":"static/js/186.4acd9560.chunk.js","mappings":"wQAKe,SAASA,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WAAM,wCAEd,oGAEIH,GAAW,GAFf,UAG0BI,EAAAA,EAAAA,IAAaH,GAHvC,OAGUN,EAHV,OAKIC,EAAWD,GACXG,EAAS,MANb,gDAQIA,EAAS,KAAMO,SARnB,yBAUIL,GAAW,GAVf,6EAFc,sBACTC,GADS,mCAedK,EACD,GAAE,CAACL,KAGF,gCACa,OAAVJ,IAAkB,uBAAIA,IACtBE,IAAW,SAAC,IAAD,KACZ,wBACGQ,QAAQZ,IACPA,EAAQa,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACV,2BACE,uBAAIF,KACJ,uBAAIC,MAFGC,EADC,QASrB,C,8LC1CDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAU,uBADF,uBACvBG,EADuB,EACvBA,KADuB,kBAExBC,EAAuBD,IAFC,2CAAH,qDAKjBE,EAAgB,mCAAG,WAAMC,GAAN,yFACPN,EAAAA,EAAAA,IAAA,8BAAiCM,IAD1B,uBACtBH,EADsB,EACtBA,KADsB,kBAGvBC,EAAuBD,IAHA,2CAAH,sDAMhBI,EAAiB,mCAAG,WAAMlB,GAAN,yFACRW,EAAAA,EAAAA,IAAA,iBAAoBX,IADZ,uBACvBc,EADuB,EACvBA,KADuB,kBAExBK,EAAqBL,IAFG,2CAAH,sDAKjBM,EAAS,mCAAG,WAAMpB,GAAN,yFACAW,EAAAA,EAAAA,IAAA,iBAAoBX,EAApB,aADA,uBACfc,EADe,EACfA,KADe,kBAEhBO,EAAkBP,IAFF,2CAAH,sDAKTX,EAAY,mCAAG,WAAMH,GAAN,yFACHW,EAAAA,EAAAA,IAAA,iBAAoBX,EAApB,aADG,uBAClBc,EADkB,EAClBA,KADkB,kBAEnBQ,EAAqBR,IAFF,2CAAH,sDAKnBC,EAAyB,SAAC,GAAD,SAAGQ,QACxBhB,KAAI,kBAAoB,CAC9BG,GADU,EAAGA,GAEbc,MAFU,EAAOA,MAAP,GADiB,EAMzBL,EAAuB,SAAAL,GAC3B,IAAQU,EACNV,EADMU,MAAOC,EACbX,EADaW,aAAcC,EAC3BZ,EAD2BY,SAAUC,EACrCb,EADqCa,YAAaC,EAClDd,EADkDc,OAAQC,EAC1Df,EAD0De,WAG5D,MAAO,CACLL,MAAAA,EACAC,aAAc,IAAIK,KAAKL,GAAcM,cACrCL,SAAAA,EACAC,YAAaA,GAAe,kCAAoCA,EAChEC,OAAQA,EAAOrB,KAAI,kBAAe,CAAEyB,KAAjB,EAAGA,KAAH,IACnBH,WAAAA,EAEH,EAEKR,EAAoB,SAAC,GAAD,SAAGY,KACtB1B,KAAI,gBAAG2B,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAd,MAAwC,CAC/CD,UAAAA,EACAC,aACEA,GAAgB,kCAAoCA,EACtDH,KAJO,EAA4BA,KAA5B,GADe,EAQpBV,EAAuB,SAAC,GAAD,SAAGC,QACtBhB,KAAI,kBAA8B,CACxCC,OADU,EAAGA,OAEbC,QAFU,EAAWA,QAGrBC,GAHU,EAAoBA,GAApB,GADe,C","sources":["components/Reviews/Reviews.jsx","service/films-service.js"],"sourcesContent":["import Loader from 'components/Loader/Loader';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from 'service/films-service';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    async function getReviews() {\n      try {\n        setLoading(true);\n        const reviews = await fetchReviews(movieId);\n\n        setReviews(reviews);\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {error !== null && <p>{error}</p>}\n      {loading && <Loader />}\n      <ul>\n        {Boolean(reviews) &&\n          reviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <p>{author}</p>\n              <p>{content}</p>\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '0df85a9f4a0e6a141a9b6b1b0b1aadce';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const fetchTendingFilms = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n  return getNormalizedFilmsData(data);\n};\n\nexport const fetchSearchFilms = async value => {\n  const { data } = await axios.get(`/search/movie?query=${value}`);\n\n  return getNormalizedFilmsData(data);\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  return getNormalizedDetails(data);\n};\n\nexport const fetchCast = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return getNormalizedCast(data);\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return getNormalizedReviews(data);\n};\n\nconst getNormalizedFilmsData = ({ results }) =>\n  results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\nconst getNormalizedDetails = data => {\n  const { title, release_date, overview, poster_path, genres, popularity } =\n    data;\n\n  return {\n    title,\n    release_date: new Date(release_date).getFullYear(),\n    overview,\n    poster_path: poster_path && 'https://image.tmdb.org/t/p/w300' + poster_path,\n    genres: genres.map(({ name }) => ({ name })),\n    popularity,\n  };\n};\n\nconst getNormalizedCast = ({ cast }) =>\n  cast.map(({ character, profile_path, name }) => ({\n    character,\n    profile_path:\n      profile_path && 'https://image.tmdb.org/t/p/w200' + profile_path,\n    name,\n  }));\n\nconst getNormalizedReviews = ({ results }) =>\n  results.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n"],"names":["Reviews","useState","reviews","setReviews","error","setError","loading","setLoading","movieId","useParams","useEffect","fetchReviews","message","getReviews","Boolean","map","author","content","id","axios","api_key","fetchTendingFilms","data","getNormalizedFilmsData","fetchSearchFilms","value","fetchMovieDetails","getNormalizedDetails","fetchCast","getNormalizedCast","getNormalizedReviews","results","title","release_date","overview","poster_path","genres","popularity","Date","getFullYear","name","cast","character","profile_path"],"sourceRoot":""}
{"version":3,"file":"static/js/824.fd02e3ed.chunk.js","mappings":"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","sources":["components/FilmsList/FilmsList.jsx","components/SearchForm/SearchForm.jsx","pages/MoviesPage/MoviesPage.jsx","service/films-service.js"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport function FilmsList({ films }) {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {Boolean(films) &&\n        films.map(({ title, id }) => (\n          <li key={id}>\n            <Link state={{ from: location }} to={`/movies/${id}`}>\n              {title}\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nFilmsList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport function SearchForm({ submit }) {\n  const [value, setValue] = useState('');\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n\n    submit(value.trim().toLowerCase());\n    setValue('');\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        onChange={handleChange}\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search films\"\n        value={value}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n\nSearchForm.propTypes = {\n  submit: PropTypes.func.isRequired,\n};\n","import { FilmsList } from 'components/FilmsList/FilmsList';\nimport Loader from 'components/Loader/Loader';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { fetchSearchFilms } from 'service/films-service';\n\nexport default function MoviesPage({ results }) {\n  const [films, setFilms] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const q = searchParams.get('q');\n\n  useEffect(() => {\n    if (!q) return;\n\n    async function getFilms() {\n      try {\n        setLoading(true);\n        const results = await fetchSearchFilms(q);\n        setFilms(results);\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getFilms();\n  }, [q]);\n\n  const getValue = inputValue => {\n    setSearchParams({ q: inputValue });\n    setFilms([]);\n  };\n\n  return (\n    <>\n      <SearchForm submit={getValue} />\n      <FilmsList films={films} />\n      {error !== null && <p>{error}</p>}\n      {loading && <Loader />}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '0df85a9f4a0e6a141a9b6b1b0b1aadce';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const fetchTendingFilms = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n  return getNormalizedFilmsData(data);\n};\n\nexport const fetchSearchFilms = async value => {\n  const { data } = await axios.get(`/search/movie?query=${value}`);\n\n  return getNormalizedFilmsData(data);\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  return getNormalizedDetails(data);\n};\n\nexport const fetchCast = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return getNormalizedCast(data);\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return getNormalizedReviews(data);\n};\n\nconst getNormalizedFilmsData = ({ results }) =>\n  results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\nconst getNormalizedDetails = data => {\n  const { title, release_date, overview, poster_path, genres, popularity } =\n    data;\n\n  return {\n    title,\n    release_date: new Date(release_date).getFullYear(),\n    overview,\n    poster_path: poster_path && 'https://image.tmdb.org/t/p/w300' + poster_path,\n    genres: genres.map(({ name }) => ({ name })),\n    popularity,\n  };\n};\n\nconst getNormalizedCast = ({ cast }) =>\n  cast.map(({ character, profile_path, name }) => ({\n    character,\n    profile_path:\n      profile_path && 'https://image.tmdb.org/t/p/w200' + profile_path,\n    name,\n  }));\n\nconst getNormalizedReviews = ({ results }) =>\n  results.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n"],"names":["FilmsList","films","location","useLocation","Boolean","map","title","id","state","from","to","SearchForm","submit","useState","value","setValue","onSubmit","e","preventDefault","trim","toLowerCase","onChange","target","type","autoComplete","autoFocus","placeholder","MoviesPage","results","setFilms","error","setError","loading","setLoading","useSearchParams","searchParams","setSearchParams","q","get","useEffect","fetchSearchFilms","message","getFilms","inputValue","Loader","axios","api_key","fetchTendingFilms","data","getNormalizedFilmsData","fetchMovieDetails","movieId","getNormalizedDetails","fetchCast","getNormalizedCast","fetchReviews","getNormalizedReviews","release_date","overview","poster_path","genres","popularity","Date","getFullYear","name","cast","character","profile_path","author","content"],"sourceRoot":""}
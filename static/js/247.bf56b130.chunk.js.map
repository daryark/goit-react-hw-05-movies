{"version":3,"file":"static/js/247.bf56b130.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","service/films-service.js"],"sourcesContent":["import Loader from 'components/Loader/Loader';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'service/films-service';\n\nexport default function Cast() {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    async function getCast() {\n      try {\n        setLoading(true);\n        const cast = await fetchCast(movieId);\n\n        setCast(cast);\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {error !== null && <p>{error}</p>}\n      {loading && <Loader />}\n      <ul>\n        {Boolean(cast) &&\n          cast.map(({ character, profile_path, name }) => (\n            <li key={name}>\n              <img\n                src={\n                  profile_path ??\n                  'https://via.placeholder.com/200x300.png?text=No+photo'\n                }\n                alt={name}\n              />\n              <p>\n                {name} as ({character})\n              </p>\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '0df85a9f4a0e6a141a9b6b1b0b1aadce';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const fetchTendingFilms = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n  return getNormalizedFilmsData(data);\n};\n\nexport const fetchSearchFilms = async value => {\n  const { data } = await axios.get(`/search/movie?query=${value}`);\n\n  return getNormalizedFilmsData(data);\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  return getNormalizedDetails(data);\n};\n\nexport const fetchCast = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return getNormalizedCast(data);\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return getNormalizedReviews(data);\n};\n\nconst getNormalizedFilmsData = ({ results }) =>\n  results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\nconst getNormalizedDetails = data => {\n  const { title, release_date, overview, poster_path, genres, popularity } =\n    data;\n\n  return {\n    title,\n    release_date: new Date(release_date).getFullYear(),\n    overview,\n    poster_path: poster_path && 'https://image.tmdb.org/t/p/w300' + poster_path,\n    genres: genres.map(({ name }) => ({ name })),\n    popularity: Math.round(popularity),\n  };\n};\n\nconst getNormalizedCast = ({ cast }) =>\n  cast.map(({ character, profile_path, name }) => ({\n    character,\n    profile_path:\n      profile_path && 'https://image.tmdb.org/t/p/w200' + profile_path,\n    name,\n  }));\n\nconst getNormalizedReviews = ({ results }) =>\n  results.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n"],"names":["Cast","useState","cast","setCast","error","setError","loading","setLoading","movieId","useParams","useEffect","fetchCast","message","getCast","Boolean","map","character","profile_path","name","src","alt","axios","api_key","fetchTendingFilms","data","getNormalizedFilmsData","fetchSearchFilms","value","fetchMovieDetails","getNormalizedDetails","getNormalizedCast","fetchReviews","getNormalizedReviews","results","id","title","release_date","overview","poster_path","genres","popularity","Date","getFullYear","Math","round","author","content"],"sourceRoot":""}